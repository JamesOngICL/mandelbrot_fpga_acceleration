// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mandelbrot_compute_mandelbrot_compute_Pipeline_l_S_count1_0_count1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        count2_2_out,
        count2_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] count2_2_out;
output   count2_2_out_ap_vld;

reg ap_idle;
reg count2_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln62_reg_446;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln62_fu_119_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [29:0] v62_V_load_reg_450;
reg   [29:0] v57_V_load_reg_455;
wire   [29:0] v53_V_fu_191_p4;
reg   [29:0] v53_V_reg_460;
wire   [29:0] v71_V_fu_245_p4;
reg   [29:0] v71_V_reg_465;
wire  signed [104:0] sext_ln1316_2_fu_263_p1;
wire  signed [104:0] sext_ln1316_3_fu_281_p1;
reg   [29:0] v34_V_load_reg_482;
wire   [0:0] v37_fu_312_p2;
reg   [0:0] v37_reg_487;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [29:0] v62_V_fu_64;
wire   [29:0] v79_V_fu_324_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
reg   [29:0] v57_V_fu_68;
wire   [29:0] v74_V_fu_330_p3;
reg   [29:0] v34_V_fu_72;
wire   [29:0] v85_V_2_fu_395_p3;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage0;
reg   [31:0] v38_fu_76;
wire   [31:0] count2_1_fu_336_p3;
wire    ap_block_pp0_stage2;
reg   [9:0] count1_fu_80;
wire   [9:0] count1_2_fu_125_p2;
wire    ap_block_pp0_stage2_01001;
wire  signed [54:0] v42_V_fu_137_p3;
wire  signed [54:0] v44_V_fu_145_p3;
wire   [103:0] r_V_2_fu_169_p2;
wire   [54:0] v48_V_fu_175_p4;
wire   [54:0] v52_V_fu_185_p2;
wire  signed [54:0] r_V_fu_201_p0;
wire  signed [104:0] sext_ln1316_fu_153_p1;
wire  signed [54:0] r_V_fu_201_p1;
wire   [104:0] r_V_fu_201_p2;
wire  signed [54:0] r_V_4_fu_217_p0;
wire  signed [104:0] sext_ln1319_fu_161_p1;
wire  signed [54:0] r_V_4_fu_217_p1;
wire   [104:0] r_V_4_fu_217_p2;
wire   [54:0] v58_V_fu_207_p4;
wire   [54:0] v66_V_fu_233_p2;
wire   [54:0] v63_V_fu_223_p4;
wire   [54:0] v70_V_fu_239_p2;
wire   [54:0] v73_V_fu_255_p3;
wire  signed [54:0] grp_fu_267_p0;
wire  signed [54:0] grp_fu_267_p1;
wire   [54:0] v78_V_fu_273_p3;
wire  signed [54:0] grp_fu_285_p0;
wire  signed [54:0] grp_fu_285_p1;
wire   [2:0] tmp_fu_302_p4;
wire   [31:0] v39_fu_318_p2;
wire   [104:0] grp_fu_267_p2;
wire   [104:0] grp_fu_285_p2;
wire   [54:0] v76_V_fu_359_p4;
wire   [54:0] v81_V_fu_369_p4;
wire   [54:0] v84_V_fu_379_p2;
wire   [29:0] v85_V_fu_385_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

mandelbrot_compute_mul_55s_55s_104_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 55 ),
    .din1_WIDTH( 55 ),
    .dout_WIDTH( 104 ))
mul_55s_55s_104_1_1_U1(
    .din0(v44_V_fu_145_p3),
    .din1(v42_V_fu_137_p3),
    .dout(r_V_2_fu_169_p2)
);

mandelbrot_compute_mul_55s_55s_105_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 55 ),
    .din1_WIDTH( 55 ),
    .dout_WIDTH( 105 ))
mul_55s_55s_105_1_1_U2(
    .din0(r_V_fu_201_p0),
    .din1(r_V_fu_201_p1),
    .dout(r_V_fu_201_p2)
);

mandelbrot_compute_mul_55s_55s_105_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 55 ),
    .din1_WIDTH( 55 ),
    .dout_WIDTH( 105 ))
mul_55s_55s_105_1_1_U3(
    .din0(r_V_4_fu_217_p0),
    .din1(r_V_4_fu_217_p1),
    .dout(r_V_4_fu_217_p2)
);

mandelbrot_compute_mul_55s_55s_105_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 55 ),
    .din1_WIDTH( 55 ),
    .dout_WIDTH( 105 ))
mul_55s_55s_105_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_267_p0),
    .din1(grp_fu_267_p1),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

mandelbrot_compute_mul_55s_55s_105_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 55 ),
    .din1_WIDTH( 55 ),
    .dout_WIDTH( 105 ))
mul_55s_55s_105_5_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_285_p0),
    .din1(grp_fu_285_p1),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

mandelbrot_compute_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        count1_fu_80 <= 10'd0;
    end else if (((icmp_ln62_fu_119_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        count1_fu_80 <= count1_2_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        v34_V_fu_72 <= 30'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v34_V_fu_72 <= v85_V_2_fu_395_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            v38_fu_76 <= 32'd0;
        end else if (((icmp_ln62_reg_446 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            v38_fu_76 <= count2_1_fu_336_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            v57_V_fu_68 <= 30'd0;
        end else if (((icmp_ln62_reg_446 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            v57_V_fu_68 <= v74_V_fu_330_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            v62_V_fu_64 <= 30'd0;
        end else if (((icmp_ln62_reg_446 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            v62_V_fu_64 <= v79_V_fu_324_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln62_reg_446 <= icmp_ln62_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_reg_446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v34_V_load_reg_482 <= v34_V_fu_72;
        v37_reg_487 <= v37_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_119_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v53_V_reg_460 <= {{v52_V_fu_185_p2[54:25]}};
        v57_V_load_reg_455 <= v57_V_fu_68;
        v62_V_load_reg_450 <= v62_V_fu_64;
        v71_V_reg_465 <= {{v70_V_fu_239_p2[54:25]}};
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        count2_2_out_ap_vld = 1'b1;
    end else begin
        count2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign count1_2_fu_125_p2 = (count1_fu_80 + 10'd1);

assign count2_1_fu_336_p3 = ((v37_fu_312_p2[0:0] == 1'b1) ? v39_fu_318_p2 : v38_fu_76);

assign count2_2_out = v38_fu_76;

assign grp_fu_267_p0 = sext_ln1316_2_fu_263_p1;

assign grp_fu_267_p1 = sext_ln1316_2_fu_263_p1;

assign grp_fu_285_p0 = sext_ln1316_3_fu_281_p1;

assign grp_fu_285_p1 = sext_ln1316_3_fu_281_p1;

assign icmp_ln62_fu_119_p2 = ((count1_fu_80 == 10'd1000) ? 1'b1 : 1'b0);

assign r_V_4_fu_217_p0 = sext_ln1319_fu_161_p1;

assign r_V_4_fu_217_p1 = sext_ln1319_fu_161_p1;

assign r_V_fu_201_p0 = sext_ln1316_fu_153_p1;

assign r_V_fu_201_p1 = sext_ln1316_fu_153_p1;

assign sext_ln1316_2_fu_263_p1 = $signed(v73_V_fu_255_p3);

assign sext_ln1316_3_fu_281_p1 = $signed(v78_V_fu_273_p3);

assign sext_ln1316_fu_153_p1 = v42_V_fu_137_p3;

assign sext_ln1319_fu_161_p1 = v44_V_fu_145_p3;

assign tmp_fu_302_p4 = {{v34_V_fu_72[29:27]}};

assign v37_fu_312_p2 = (($signed(tmp_fu_302_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign v39_fu_318_p2 = (v38_fu_76 + 32'd1);

assign v42_V_fu_137_p3 = {{v57_V_fu_68}, {25'd0}};

assign v44_V_fu_145_p3 = {{v62_V_fu_64}, {25'd0}};

assign v48_V_fu_175_p4 = {{r_V_2_fu_169_p2[103:49]}};

assign v52_V_fu_185_p2 = (v48_V_fu_175_p4 + 55'd1125899906842624);

assign v53_V_fu_191_p4 = {{v52_V_fu_185_p2[54:25]}};

assign v58_V_fu_207_p4 = {{r_V_fu_201_p2[104:50]}};

assign v63_V_fu_223_p4 = {{r_V_4_fu_217_p2[104:50]}};

assign v66_V_fu_233_p2 = ($signed(v58_V_fu_207_p4) + $signed(55'd33776997205278720));

assign v70_V_fu_239_p2 = (v66_V_fu_233_p2 - v63_V_fu_223_p4);

assign v71_V_fu_245_p4 = {{v70_V_fu_239_p2[54:25]}};

assign v73_V_fu_255_p3 = {{v71_V_fu_245_p4}, {25'd0}};

assign v74_V_fu_330_p3 = ((v37_fu_312_p2[0:0] == 1'b1) ? v71_V_reg_465 : v57_V_load_reg_455);

assign v76_V_fu_359_p4 = {{grp_fu_267_p2[104:50]}};

assign v78_V_fu_273_p3 = {{v53_V_fu_191_p4}, {25'd0}};

assign v79_V_fu_324_p3 = ((v37_fu_312_p2[0:0] == 1'b1) ? v53_V_reg_460 : v62_V_load_reg_450);

assign v81_V_fu_369_p4 = {{grp_fu_285_p2[104:50]}};

assign v84_V_fu_379_p2 = (v76_V_fu_359_p4 + v81_V_fu_369_p4);

assign v85_V_2_fu_395_p3 = ((v37_reg_487[0:0] == 1'b1) ? v85_V_fu_385_p4 : v34_V_load_reg_482);

assign v85_V_fu_385_p4 = {{v84_V_fu_379_p2[54:25]}};

endmodule //mandelbrot_compute_mandelbrot_compute_Pipeline_l_S_count1_0_count1
